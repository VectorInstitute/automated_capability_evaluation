import logging  # noqa: D100
import os  # noqa: D100

import hydra
from omegaconf import DictConfig

from src.generate_capabilities import (
    apply_dimensionality_reduction,
    apply_dimensionality_reduction_to_test_capabilities,
    filter_capabilities,
    generate_and_set_capabilities_embeddings,
    generate_capability_heatmap,
    get_previous_capabilities,
    plot_hierarchical_capability_2d_embeddings,
)


logger = logging.getLogger(__name__)


@hydra.main(
    version_base=None,
    config_path="example_cfg",
    config_name="train_test_embedding_visualization_cfg",
)
def main(cfg: DictConfig) -> None:
    """
    Run the visualization script with the specified configuration.

    Args:
        cfg (DictConfig): Configuration for the script.
    """
    # Load capabilities from the specified directory
    # Set the base capability directory
    train_capability_dir = os.path.join(
        cfg.capabilities_cfg.saved_capabilities_dir,
        cfg.capabilities_cfg.domain,
        "train",
    )

    # Fetch previously generated capabilities
    capabilities = get_previous_capabilities(capability_dir=train_capability_dir)
    logger.info(f"Loaded {len(capabilities)} capabilities from {train_capability_dir}")
    # Assert that the capabilities list is not empty
    assert capabilities, "No capabilities found in the specified directory."

    # Embed capabilities using openai embedding model
    generate_and_set_capabilities_embeddings(
        capabilities=capabilities,
        embedding_model_name=cfg.embedding_cfg.embedding_model,
        embed_dimensions=cfg.embedding_cfg.embedding_size,
    )
    # Filter capabilities based on their embeddings
    filtered_capabilities = filter_capabilities(
        capabilities,
        embedding_model_name=cfg.embedding_cfg.embedding_model,
        similarity_threshold=cfg.embedding_cfg.filtering_similarity_threshold,
    )
    # Reduce the dimensionality of capability embeddings generated by the
    # embedding model.
    dim_reduction = apply_dimensionality_reduction(
        filtered_capabilities,
        dim_reduction_method_name=cfg.dimensionality_reduction_cfg.reduce_dimensionality_method,
        output_dimension_size=cfg.dimensionality_reduction_cfg.reduced_dimensionality_size,
        embedding_model_name=cfg.embedding_cfg.embedding_model,
        normalize_output=cfg.dimensionality_reduction_cfg.normalize_output,
    )
    # Visualize the reduced embeddings
    logger.info(
        f"Visualizing {len(filtered_capabilities)} train capabilities at {cfg.embedding_visualization_cfg.save_dir}"
    )
    # Plot training capabilities
    plot_hierarchical_capability_2d_embeddings(
        capabilities=filtered_capabilities,
        dim_reduction_method=cfg.dimensionality_reduction_cfg.reduce_dimensionality_method,
        save_dir=cfg.embedding_visualization_cfg.save_dir,
        plot_name=cfg.embedding_visualization_cfg.plot_name + " Train",
        show_point_ids=cfg.embedding_visualization_cfg.show_point_ids,
    )
    # Create and save the heatmap
    logger.info(
        f"Generating heatmap for {len(filtered_capabilities)} train capabilities at {cfg.heatmap_cfg.save_dir}"
    )
    generate_capability_heatmap(
        capabilities=filtered_capabilities,
        embedding_model_name=cfg.embedding_cfg.embedding_model,  # Using the original embeddings, not the reduced version.
        save_dir=cfg.heatmap_cfg.save_dir,
        plot_name=cfg.heatmap_cfg.plot_name,
        add_squares=cfg.heatmap_cfg.add_squares,
    )
    # Test capabilities
    # Only PCA can be used for test capabilities.
    if cfg.dimensionality_reduction_cfg.reduce_dimensionality_method == "pca":
        test_capability_dir = os.path.join(
            cfg.capabilities_cfg.saved_capabilities_dir,
            cfg.capabilities_cfg.domain,
            "test",
        )
        # Load test capabilities
        test_capabilities = get_previous_capabilities(
            capability_dir=test_capability_dir
        )
        # Assert that the capabilities list is not empty
        logger.info(
            f"Loaded {len(test_capabilities)} test capabilities from {test_capability_dir}"
        )
        assert test_capabilities, "No capabilities found in the specified directory."

        # Assuming test capabilities are newly generated by the LLM,
        # we don't assume a specific area for them. So, we set their area
        # to "test" to distinguish them from the training capabilities.
        for capability in test_capabilities:
            capability.area = "test"

        # Embed test capabilities using openai embedding model
        generate_and_set_capabilities_embeddings(
            capabilities=test_capabilities,
            embedding_model_name=cfg.embedding_cfg.embedding_model,
            embed_dimensions=cfg.embedding_cfg.embedding_size,
        )
        # Use the fitted PCA dim reduction to transform the test capabilities
        apply_dimensionality_reduction_to_test_capabilities(
            test_capabilities,
            dim_reduction_method=dim_reduction,
            embedding_model_name=cfg.embedding_cfg.embedding_model,
        )
        # Visualize train and test capability embeddings together
        all_capabilities = filtered_capabilities + test_capabilities
        logger.info(
            f"Visualizing {len(all_capabilities)} train and test capabilities at {cfg.embedding_visualization_cfg.save_dir}"
        )
        plot_hierarchical_capability_2d_embeddings(
            capabilities=all_capabilities,
            dim_reduction_method=cfg.dimensionality_reduction_cfg.reduce_dimensionality_method,
            save_dir=cfg.embedding_visualization_cfg.save_dir,
            plot_name=cfg.embedding_visualization_cfg.plot_name + " Train and Test",
            show_point_ids=cfg.embedding_visualization_cfg.show_point_ids,
        )


if __name__ == "__main__":
    main()
