"""The visualize_embeddings.py script is used to visualize LLM generated capabilities.

It generates a 2D plot of the capabilities' embeddings using the specified
dimensionality reduction method. It also generates a heatmap of the capabilities
similarity matrix. Similarity is computed using the original embeddings
generated with the embedding model defined in the config file.
"""

import os  # noqa: D100

import hydra
from omegaconf import DictConfig

from src.generate_capabilities import (
    _get_previous_capabilities,
    apply_dimensionality_reduction,
    filter_capabilities,
    generate_and_set_capabilities_embeddings,
    generate_capability_heatmap,
    plot_hierarchical_capability_2d_embeddings,
)


@hydra.main(
    version_base=None, config_path="example_cfg", config_name="visualization_cfg"
)
def main(cfg: DictConfig) -> None:
    """
    Run the visualization script with the specified configuration.

    Args:
        cfg (DictConfig): Configuration for the script.
    """
    # Load capabilities from the specified directory
    # Set the base capability directory
    base_capability_dir = os.path.join(
        cfg.capabilities_cfg.saved_capabilities_dir,
        cfg.capabilities_cfg.domain,
    )
    os.makedirs(base_capability_dir, exist_ok=True)

    # Fetch previously generated capabilities
    capabilities = _get_previous_capabilities(capability_dir=base_capability_dir)
    # Assert that the capabilities list is not empty
    print(f"Loaded {len(capabilities)} capabilities from {base_capability_dir}")
    assert capabilities, "No capabilities found in the specified directory."

    # Embed capabilities using openai embedding model
    generate_and_set_capabilities_embeddings(
        capabilities=capabilities,
        embedding_model_name=cfg.embedding_cfg.embedding_model,
        embed_dimensions=cfg.embedding_cfg.embedding_size,
    )
    # Filter capabilities based on their embeddings
    filtered_capabilities = filter_capabilities(
        capabilities,
        embedding_model_name=cfg.embedding_cfg.embedding_model,
        similarity_threshold=cfg.embedding_cfg.filtering_similarity_threshold,
    )
    # Reduce the dimensionality of capability embeddings generated by the
    # embedding model.
    apply_dimensionality_reduction(
        filtered_capabilities,
        dim_reduction_method=cfg.dimensionality_reduction_cfg.reduce_dimensionality_method,
        output_dimension_size=cfg.dimensionality_reduction_cfg.reduced_dimensionality_size,
        embedding_model_name=cfg.embedding_cfg.embedding_model,
        tsne_perplexity=cfg.dimensionality_reduction_cfg.tsne_perplexity,
    )
    # Visualize the reduced embeddings
    print(
        f"Visualizing {len(filtered_capabilities)} capabilities at {cfg.embedding_visualization_cfg.save_dir}"
    )
    plot_hierarchical_capability_2d_embeddings(
        capabilities=filtered_capabilities,
        dim_reduction_method=cfg.dimensionality_reduction_cfg.reduce_dimensionality_method,
        save_dir=cfg.embedding_visualization_cfg.save_dir,
        plot_name=cfg.embedding_visualization_cfg.plot_name,
        show_point_ids=cfg.embedding_visualization_cfg.show_point_ids,
    )
    # Create and save the heatmap
    print(
        f"Generating heatmap for {len(filtered_capabilities)} capabilities at {cfg.heatmap_cfg.save_dir}"
    )
    generate_capability_heatmap(
        capabilities=filtered_capabilities,
        embedding_model_name=cfg.embedding_cfg.embedding_model,  # Using the original embeddings, not the reduced version.
        save_dir=cfg.heatmap_cfg.save_dir,
        plot_name=cfg.heatmap_cfg.plot_name,
        add_squares=cfg.heatmap_cfg.add_squares,
    )


if __name__ == "__main__":
    main()
